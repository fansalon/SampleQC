// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fit_sampleQC_mle_cpp
List fit_sampleQC_mle_cpp(arma::mat x, arma::mat init_gamma_i, arma::uvec groups, int D, int J, int K, int N, int n_iter);
RcppExport SEXP _SampleQC_fit_sampleQC_mle_cpp(SEXP xSEXP, SEXP init_gamma_iSEXP, SEXP groupsSEXP, SEXP DSEXP, SEXP JSEXP, SEXP KSEXP, SEXP NSEXP, SEXP n_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type init_gamma_i(init_gamma_iSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_sampleQC_mle_cpp(x, init_gamma_i, groups, D, J, K, N, n_iter));
    return rcpp_result_gen;
END_RCPP
}
// fit_sampleQC_robust_cpp
List fit_sampleQC_robust_cpp(arma::mat x, arma::uvec init_z, arma::uvec groups, int D, int J, int K, int N, int em_iters, double mcd_alpha, int mcd_iters);
RcppExport SEXP _SampleQC_fit_sampleQC_robust_cpp(SEXP xSEXP, SEXP init_zSEXP, SEXP groupsSEXP, SEXP DSEXP, SEXP JSEXP, SEXP KSEXP, SEXP NSEXP, SEXP em_itersSEXP, SEXP mcd_alphaSEXP, SEXP mcd_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type init_z(init_zSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type em_iters(em_itersSEXP);
    Rcpp::traits::input_parameter< double >::type mcd_alpha(mcd_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type mcd_iters(mcd_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_sampleQC_robust_cpp(x, init_z, groups, D, J, K, N, em_iters, mcd_alpha, mcd_iters));
    return rcpp_result_gen;
END_RCPP
}
// print_vector
void print_vector(arma::vec vec, const char* vec_name);
RcppExport SEXP _SampleQC_print_vector(SEXP vecSEXP, SEXP vec_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const char* >::type vec_name(vec_nameSEXP);
    print_vector(vec, vec_name);
    return R_NilValue;
END_RCPP
}
// print_matrix
void print_matrix(arma::mat m, const char* m_name, int n_to_print);
RcppExport SEXP _SampleQC_print_matrix(SEXP mSEXP, SEXP m_nameSEXP, SEXP n_to_printSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< const char* >::type m_name(m_nameSEXP);
    Rcpp::traits::input_parameter< int >::type n_to_print(n_to_printSEXP);
    print_matrix(m, m_name, n_to_print);
    return R_NilValue;
END_RCPP
}
// print_ivector
void print_ivector(arma::uvec vec, const char* vec_name);
RcppExport SEXP _SampleQC_print_ivector(SEXP vecSEXP, SEXP vec_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const char* >::type vec_name(vec_nameSEXP);
    print_ivector(vec, vec_name);
    return R_NilValue;
END_RCPP
}
// reorder_vector
arma::vec reorder_vector(arma::vec x, arma::uvec idx);
RcppExport SEXP _SampleQC_reorder_vector(SEXP xSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(reorder_vector(x, idx));
    return rcpp_result_gen;
END_RCPP
}
// reorder_matrix_rows
arma::mat reorder_matrix_rows(arma::mat x, arma::uvec idx);
RcppExport SEXP _SampleQC_reorder_matrix_rows(SEXP xSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(reorder_matrix_rows(x, idx));
    return rcpp_result_gen;
END_RCPP
}
// reorder_matrix_cols
arma::mat reorder_matrix_cols(arma::mat x, arma::uvec idx);
RcppExport SEXP _SampleQC_reorder_matrix_cols(SEXP xSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(reorder_matrix_cols(x, idx));
    return rcpp_result_gen;
END_RCPP
}
// reorder_cube_slices
arma::cube reorder_cube_slices(arma::cube x, arma::uvec idx);
RcppExport SEXP _SampleQC_reorder_cube_slices(SEXP xSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(reorder_cube_slices(x, idx));
    return rcpp_result_gen;
END_RCPP
}
// centre_x
arma::mat centre_x(arma::mat x, arma::vec mu_0, int D, int N);
RcppExport SEXP _SampleQC_centre_x(SEXP xSEXP, SEXP mu_0SEXP, SEXP DSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu_0(mu_0SEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(centre_x(x, mu_0, D, N));
    return rcpp_result_gen;
END_RCPP
}
// init_alpha_j
arma::mat init_alpha_j(arma::mat x, arma::uvec groups, int D, int J, int N);
RcppExport SEXP _SampleQC_init_alpha_j(SEXP xSEXP, SEXP groupsSEXP, SEXP DSEXP, SEXP JSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(init_alpha_j(x, groups, D, J, N));
    return rcpp_result_gen;
END_RCPP
}
// mmd_fn
double mmd_fn(arma::mat X, arma::mat Y, double sigma);
RcppExport SEXP _SampleQC_mmd_fn(SEXP XSEXP, SEXP YSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mmd_fn(X, Y, sigma));
    return rcpp_result_gen;
END_RCPP
}
// subsample_mmd_fn
double subsample_mmd_fn(arma::mat X, arma::mat Y, int subsample, int n_times, double sigma);
RcppExport SEXP _SampleQC_subsample_mmd_fn(SEXP XSEXP, SEXP YSEXP, SEXP subsampleSEXP, SEXP n_timesSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type subsample(subsampleSEXP);
    Rcpp::traits::input_parameter< int >::type n_times(n_timesSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(subsample_mmd_fn(X, Y, subsample, n_times, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SampleQC_fit_sampleQC_mle_cpp", (DL_FUNC) &_SampleQC_fit_sampleQC_mle_cpp, 8},
    {"_SampleQC_fit_sampleQC_robust_cpp", (DL_FUNC) &_SampleQC_fit_sampleQC_robust_cpp, 10},
    {"_SampleQC_print_vector", (DL_FUNC) &_SampleQC_print_vector, 2},
    {"_SampleQC_print_matrix", (DL_FUNC) &_SampleQC_print_matrix, 3},
    {"_SampleQC_print_ivector", (DL_FUNC) &_SampleQC_print_ivector, 2},
    {"_SampleQC_reorder_vector", (DL_FUNC) &_SampleQC_reorder_vector, 2},
    {"_SampleQC_reorder_matrix_rows", (DL_FUNC) &_SampleQC_reorder_matrix_rows, 2},
    {"_SampleQC_reorder_matrix_cols", (DL_FUNC) &_SampleQC_reorder_matrix_cols, 2},
    {"_SampleQC_reorder_cube_slices", (DL_FUNC) &_SampleQC_reorder_cube_slices, 2},
    {"_SampleQC_centre_x", (DL_FUNC) &_SampleQC_centre_x, 4},
    {"_SampleQC_init_alpha_j", (DL_FUNC) &_SampleQC_init_alpha_j, 5},
    {"_SampleQC_mmd_fn", (DL_FUNC) &_SampleQC_mmd_fn, 3},
    {"_SampleQC_subsample_mmd_fn", (DL_FUNC) &_SampleQC_subsample_mmd_fn, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SampleQC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
